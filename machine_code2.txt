000000100	#move 4     # set the acc = 4
100000000	#store 0 $t0    # $t0 becomes 4
011110000	#load 1 $t0    # load data[$t0] into acc                     
100000000	#store 0 $t0        # store data[$t0] back to $t0
000000101	#move 5        # set the acc = 5
100000001	#store 0 $t1    # $t1 becomes 5                 
011110001	#load 1 $t1    # load data[$t1] into acc    , now acc  = data_mem[5]    
100000001	#store 0 $t1     # store acc = data_mem[$t1] back to $t1
000000010	#move 2        # set the acc = 2
100000010	#store 0 $t2    #$t2 becomes 2                
011110010	#load 1 $t2    #load data[$t2] into acc    , now acc  = data_mem[2]
100000010	#store 0 $t2    #store acc = data_mem[2] to $t2
000000000	#move 0        #set acc = 0
100000011	#store  0 $t3    #set $t3 equal to 0
000000000	#move 0        #set acc = 0
100000100	#store 0 $t4    # $t4 becomes 0
011110100	#load 1 $t4    #load data[$t4] into acc    , now acc  = data_mem[0]
100000100	#store 0 $t4    #store acc = data_mem[2] to $t2
000000001	#move 1     #set acc = 1
100000101	#store 0 $t5     # $t5 becomes 1
011110101	#load 1 $t5    #load data[$t5] into acc    , now acc  = data_mem[1]
100000101	#store 0 $t5    #store acc = data_mem[1] to $t5
000000000	#move 0        
100000110	#store 0 $t6    #====>Mremainder  = 0x0 --- $t6
100000111	#store 0 $t7    #====>Lremainder =  = 0x0 --- $t7
011100010	#load 0 $t2            #acc = $t2 = Mdivisor
010000000	#sgt 0 0                # if Mdivisor > 0
100001100
000000000
011000100
001000001
100001101
011101100
101001101	#bne    SKIP2COND        # branch to SKIP2COND if Mdivisor < 0
011100011	#load 0 $t3            # acc = $t3 = Ldivisor
010000001	#sgt 0 1                # if ( Ldivisor > 1)
100001100
000000000
011000100
001000110
100001101
011101100
100101101	#be    EXIT_WHILE_LOOP        #exit while loop if Ldivisor < 1
011100010	#load 0 $t2            #acc = $t2 Mdivisor
010010100	#sgt 1 $t4            #Mdivisor > Mdividend
100001100
000000000
011000100
001000011
100001101
011101100
101001101	#bne     IF            # branch to if statment if the line above is true
011100011	#load 0 $t3            #acc = $t3 = Ldivisor 
010010101	#sgt 1 $t5            #get the result of Ldivisor > Ldividend
100001101	#store 0 $t13            # store the result to $t13
011100011	#load 0 $t3            #acc = Ldivisor
010110101	#seq 1 $t5            # get the result of Ldivisor == Ldividend
100001100	#store 0 $t12            # store the result to $12
011101101	#load 0 $t13            #acc = the result of Ldivisor > Ldividend
010100001	#seq 0 1                 #compare and get  the result of Ldivisor > Ldividend with 1
100001100
000000000
011000100
001000010
100001101
011101100
101001101	#bne    NEXT_COND        # if acc !=  0 meaning Ldivisor > Ldividend return 1
011101100	#load 0 $t12            #acc = the result of  Ldivisor == Ldividend
010100001	#seq 0 1                #compare the result of Ldivisor == Ldividend with 1
100001100
000000000
011000100
001000100
100001101
011101100
100101101	#be     ELSE            # branch if equal to 0
011100010	#load 0 $t2            #acc = Mdivisor         
010110100	#seq 1 $t4            # get the result of Mdivisor == Mdividend
100001100
000000000
011000100
001000100
100001101
011101100
100101101	#be    ELSE            # branch if Mdivisor == Mdividend is 0
011100001	#load 0 $t1            #acc = LQuotient
011010111	#shift 1  7            # acc = acc>>7
100001000	#store 0 $t8            # $t8 is the temp register
011100001	#load 0 $t1            # acc = LQuotient
011000001	#shift 0 1            # LQuotient << 1
100000001	#store 0 $t1            # $t1 becomes LQuotient << 1
011100000	#load 0 $t0            #acc = MQuotient
011000001	#shift 0 1            #MQuotient <<1
001011000	#sor 1 $t8            # MQuotient | temp
100000000	#store 0 $t0            # store the new value back to $t0
011100001	#load 0 $t1            # acc = LQuotient
011010111	#shift 1 7             # LQuotient >> 7
100001000	#store 0 $t8            # temp = acc
011100001	#load 0 $t1            #acc = LQuotient 
011000001	#shift 0 1            # LQuotient << 1
001000001	#sor 0 1            #LQuotient | 0x1
100000001	#store 0 $t1            # $t1 = acc
011100000	#load 0 $t0            #acc = MQuotient
011000001	#shift 0 1            #MQuotient << 1
100000000	#store 0 $t0            #$t0 = acc
011100011	#load 0 $t3            #acc = Ldivisor 
010010101	#sgt 1 $t5            #Ldivisor > Ldividend
100001100
000000000
011000100
001000101
100001101
011101100
101001101	#bne     El2            # if not true branch to El2
000000001	#move 1             #acc  = 1
100011000	#store 1 $t8            # $t8 = temp = 1
101100000	#neg                 # neg temp
000110100	#add 1 $t4            # add temp with $t4 Mdividend 
000100001	#add 0 1            # acc add 1
100000100	#store 0 $t4            # $t4 = acc 
011100011	#load 0 $t3            #acc = $t3 Ldivisor
101100000	#neg                 #neg Ldivisor
000110101	#add 1 $t5            #acc + Ldividend
000100001	#add 0 1            # acc + 1
100000101	#store 0 $t5            # $t5 = acc
011100010	#load 0 $t2            #acc = $t2 = Mdivisor
101100000	#neg                # neg Mdivisor
000110100	#add 1 $t4            #add acc + Mdividend
000100001	#add 0 1            #add acc + 1
100000100	#store 0 $t4            #$t4 = acc        
000000000	#move 0
100001100
000000000
011000100
001000000
100001101
011101100
100101101	#be	WHILE_LOOP        # jump to WHILE_LOOP
011100010	#load 0 $t2            #acc = Mdivisor
001100001	#sand 0 1            # Mdivisor & 1
011000111	#shift 0 7            # acc << 7
100001000	#store 0 $t8            # store acc to temp register
011100010	#load 0 $t2            #acc = Mdivisor
011010001	#shift 1 1            #Mdivisor >> 1
100000010	#store 0 $t2            #store result back to $t2
011100011	#load 0 $t3            #acc = Ldivisor
011010001	#shift 1 1             #Ldivisor >> 1
001011000	#sor 1 $t8            #Ldivisor | temp
100000011	#store 0 $t3            #store it back to $t3
011100101	#load 0 $t5            #acc = Ldividend
100000111	#store 0 $t7            #store acc to Lremainder
011100100	#load 0 $t4            #acc = Mdividend
100010110	#store 1 $t6            #store acc = Mremainder
000000100	#move 4             #acc = 4
100001101	#store 0 $t13            #$t13 = 4
011100000	#load 0 $t0            #acc = MQuotient
100011101	#store 1 $t13            #data_men[4] = MQuotient
000000101	#move 5                #acc = 5
100001101	#store 0 $t13            #$t13 = 5
011100001	#load 0 $t1            #acc = LQuotient
100011101	#store 1 $t13            #data_mem[5]
011100100	#load 0 $t4 
100000000	#store 0 $t0
011100101	#load 0 $t5
100000001	#store 0 $t1
011100011	#load 0 $t3
100001101	#store 0 $t13
011100010	#load 0 $t2
100000011	#store 0 $t3
011101101	#load 0 $t13
100000010	#store 0 $t2
