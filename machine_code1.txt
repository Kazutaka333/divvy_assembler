000000000	// move 0 // acc = 0
100000000	// store 0 $t0 // nM = 0
100000100	// store 0 $t4 // rM = 0
100000101	// store 0 $t5 // rL = 0
100000110	// store 0 $t6 // sB = 0
100001111	// store 0 $cout // cout = 0
000000001	// move 1 //acc = 1
100000001	// store 0  $t1 // nL = 1
000001000	// move 8 // acc = 8
100000010	// store 0  $t2 // dM = 8
011110010	// load 1  $t2 // acc = M[8]
100000010	// store 0  $t2 // dM = M[8]
010000000	// sgt 0  0
100001000	// store 0  $t8 // $t8 = (M[8] > 0)
000001001	// move 9 // acc = 9
100000011	// store 0  $t3 // dL = 9
011110011	// load 1  $t3 // acc = M[9]
100000011	// store 0  $t3 // dL = M[9]
010000000	// sgt 0  0 // $acc = (M[9] > 0)
001011000	// sor 1  $t8 // $acc = (dM > 0 || dL > 0)
100001100	// [branch] store the value of $acc into $t12
000000000	// [branch] store the MSB of label LUT index into acc
011000100	// [branch] shift-left the value in acc
001001001	// [branch] or the LSB of label LUT index with the value in acc
100001101	// [branch] store the value of acc into $t13
011101100	// [branch] restore acc
100101101	// be Pad // if input == $acc == 0  go return 0
011100101	// load 0  $t5
011010111	// shift 1  7
100001111	// store 0  $cout
011100101	// load 0  $t5
011000001	// shift 0  1
100000101	// store 0  $t5
011100100	// load 0  $t4
011000001	// shift 0  1
001011111	// sor 1  $cout
100000100	// store 0  $t4
011100000	// load 0  $t0
010010010	// sgt 1  $t2
100001000	// store 0  $t8
011100000	// load 0  $t0
010110010	// seq 1  $t2
100001001	// store 0  $t9
011100001	// load 0  $t1
010010011	// sgt 1  $t3
100001010	// store 0  $t10
011100001	// load 0  $t1
010110011	// seq 1  $t3 // $acc = (nL == dL)
001011010	// sor 1  $t10 // $acc = (nL >= dL)
001111001	// sand 1  $t9 // $acc = (nM == dM) && (nL >= dL)
001011000	// sor 1  $t8 // $acc = (nM > dM) || ((nM == dM) && (nL >= dL))
100001100	// [branch] store the value of $acc into $t12
000000000	// [branch] store the MSB of label LUT index into acc
011000100	// [branch] shift-left the value in acc
001000110	// [branch] or the LSB of label LUT index with the value in acc
100001101	// [branch] store the value of acc into $t13
011101100	// [branch] restore acc
101001101	// bne Increment // THIS WAS bez!!! Should this be bne or be?
011100011	// load 0  $t3
010010001	// sgt 1  $t1
100001100	// [branch] store the value of $acc into $t12
000000000	// [branch] store the MSB of label LUT index into acc
011000100	// [branch] shift-left the value in acc
001000101	// [branch] or the LSB of label LUT index with the value in acc
100001101	// [branch] store the value of acc into $t13
011101100	// [branch] restore acc
100101101	// be Subtract
000000001	// move 1
101100000	// neg
000110000	// add 1  $t0
000100001	// add 0  1
100000000	// store 0  $t0
011100011	// load 0  $t3
101100000	// neg
000110001	// add 1  $t1
000100001	// add 0  1
100000001	// store 0  $t1
011100010	// load 0  $t2
101100000	// neg
000110000	// add 1  $t0
000100001	// add 0  1
100000000	// store 0  $t0
011100001	// load 0  $t1
011010111	// shift 1  7
100001111	// store 0  $cout
011100001	// load 0  $t1
011000001	// shift 0  1
100000001	// store 0  $t1
011100000	// load 0  $t0
011000001	// shift 0  1
001011111	// sor 1  $cout
100000000	// store 0  $t0
011100110	// load 0  $t6
000100001	// add 0  1
100000110	// store 0  $t6
000010000	// move 16
010010110	// sgt 1  $t6
100001000	// store 0  $t8
011100000	// load 0  $t0
010000000	// sgt 0  0
100001001	// store 0  $t9
011100001	// load 0  $t1
010000000	// sgt 0  0 // $acc = (nL > 0)
001011001	// sor 1  $t9 // $acc = (nM > 0 || nL > 0)
001111000	// sand 1  $t8 // $acc = (16 > sB) && (nM > 0 || nL > 0)
100001100	// [branch] store the value of $acc into $t12
000000000	// [branch] store the MSB of label LUT index into acc
011000100	// [branch] shift-left the value in acc
001000001	// [branch] or the LSB of label LUT index with the value in acc
100001101	// [branch] store the value of acc into $t13
011101100	// [branch] restore acc
101001101	// bne Divide
011101000	// load 0  $t8
100001100	// [branch] store the value of $acc into $t12
000000000	// [branch] store the MSB of label LUT index into acc
011000100	// [branch] shift-left the value in acc
001001011	// [branch] or the LSB of label LUT index with the value in acc
100001101	// [branch] store the value of acc into $t13
011101100	// [branch] restore acc
100101101	// be Exit
011100101	// load 0  $t5
011010111	// shift 1  7
100001111	// store 0  $cout
011100101	// load 0  $t5
011000001	// shift 0  1
100000101	// store 0  $t5
011100100	// load 0  $t4
011000001	// shift 0  1
001011111	// sor 1  $cout
100000100	// store 0  $t4
011100110	// load 0  $t6
000100001	// add 0  1
100000110	// store 0  $t6
000010000	// move 16
010010110	// sgt 1  $t6
100001100	// [branch] store the value of $acc into $t12
000000000	// [branch] store the MSB of label LUT index into acc
011000100	// [branch] shift-left the value in acc
001001001	// [branch] or the LSB of label LUT index with the value in acc
100001101	// [branch] store the value of acc into $t13
011101100	// [branch] restore acc
101001101	// bne Pad
000001010	// move 10
100001000	// store 0  $t8
011100100	// load 0  $t4
100011000	// store 1  $t8
000001011	// move 11
100001001	// store 0  $t9
011100101	// load 0  $t5
100011001	// store 1  $t9
110000000	// halt
